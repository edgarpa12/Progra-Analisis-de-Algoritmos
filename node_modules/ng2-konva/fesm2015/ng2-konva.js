import { Component, Input, Output, EventEmitter, ElementRef, ContentChildren, QueryList, NgModule } from '@angular/core';
import 'rxjs';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} node
 * @return {?}
 */
function updatePicture(node) {
    const /** @type {?} */ drawingNode = node.getLayer() || node.getStage();
    if (drawingNode) {
        drawingNode.batchDraw();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} component
 * @param {?=} props
 * @param {?=} oldProps
 * @return {?}
 */
function applyNodeProps(component, props = {}, oldProps = {}) {
    if ('id' in props) {
        // tslint:disable-next-line:max-line-length
        const /** @type {?} */ message = `ng2-konva: You are using "id" attribute for Konva node. In some very rare cases it may produce bugs. Currently we recommend not to use it and use "name" attribute instead.`;
        console.warn(message);
    }
    const /** @type {?} */ instance = component._stage;
    const /** @type {?} */ updatedProps = {};
    let /** @type {?} */ hasUpdates = false;
    Object.keys(oldProps).forEach(key => {
        const /** @type {?} */ isEvent = key.slice(0, 2) === 'on';
        const /** @type {?} */ propChanged = oldProps[key] !== props[key];
        if (isEvent && propChanged) {
            let /** @type {?} */ eventName = key.substr(2).toLowerCase();
            if (eventName.substr(0, 7) === 'content') {
                eventName =
                    'content' +
                        eventName.substr(7, 1).toUpperCase() +
                        eventName.substr(8);
            }
            instance.off(eventName, oldProps[key]);
        }
        const /** @type {?} */ toRemove = !props.hasOwnProperty(key);
        if (toRemove) {
            instance.setAttr(key, undefined);
        }
    });
    Object.keys(props).forEach(key => {
        let /** @type {?} */ isEvent = key.slice(0, 2) === 'on';
        const /** @type {?} */ toAdd = oldProps[key] !== props[key];
        if (isEvent && toAdd) {
            let /** @type {?} */ eventName = key.substr(2).toLowerCase();
            if (eventName.substr(0, 7) === 'content') {
                eventName =
                    'content' +
                        eventName.substr(7, 1).toUpperCase() +
                        eventName.substr(8);
            }
            if (props[key]) {
                instance.off(eventName);
                instance.on(eventName, evt => {
                    props[key](evt.target.AngularComponent, evt);
                });
            }
        }
        if (!isEvent &&
            (props[key] !== oldProps[key] || props[key] !== instance.getAttr(key))) {
            hasUpdates = true;
            updatedProps[key] = props[key];
        }
    });
    if (hasUpdates) {
        instance.setAttrs(updatedProps);
        updatePicture(instance);
        let /** @type {?} */ val;
        Object.keys(updatedProps).forEach(prop => {
            val = updatedProps[prop];
            if (val instanceof Image && !val.complete) {
                const /** @type {?} */ node = instance;
                val.addEventListener('load', function () {
                    const /** @type {?} */ layer = node.getLayer();
                    if (layer) {
                        layer.batchDraw();
                    }
                });
            }
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} str
 * @return {?}
 */
function camelize(str) {
    return str
        .replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter, index) {
        return index == 0 ? letter.toLowerCase() : letter.toUpperCase();
    })
        .replace(/\s+/g, '');
}
/**
 * @param {?} string
 * @return {?}
 */
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
/**
 * @param {?} componentTag
 * @return {?}
 */
function getName(componentTag) {
    return capitalizeFirstLetter(camelize(componentTag.substr(3).replace('-', ' ')));
}
/**
 * @param {?} instance
 * @return {?}
 */
function createListener(instance) {
    const /** @type {?} */ output = {};
    [
        'click',
        'dblclick',
        'mouseover',
        'mouseout',
        'mousemove',
        'tap',
        'dbltap',
        'touchstart',
        'scaleXChange',
        'fillChange',
        'dragstart',
        'dragmove',
        'dragend',
    ].forEach(eventName => {
        if (instance[eventName].observers.length) {
            output['on' + eventName] = instance[eventName].emit.bind(instance[eventName]);
        }
    });
    return output;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CoreShapeComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.shapes = new QueryList();
        this.click = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.tap = new EventEmitter();
        this.dbltap = new EventEmitter();
        this.touchstart = new EventEmitter();
        this.scaleXChange = new EventEmitter();
        this.fillChange = new EventEmitter();
        this.dragstart = new EventEmitter();
        this.dragmove = new EventEmitter();
        this.dragend = new EventEmitter();
        this.added = false;
        this.cacheProps = {};
        this._stage = {};
        this.nameNode = getName(elementRef.nativeElement.localName);
    }
    /**
     * @return {?}
     */
    getStage() {
        return this._stage;
    }
    /**
     * @return {?}
     */
    getConfig() {
        return this._config || {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initKonva();
    }
    /**
     * @return {?}
     */
    initKonva() {
        const /** @type {?} */ ng = this;
        const /** @type {?} */ NodeClass = Konva[this.nameNode];
        this._stage = new NodeClass();
        this._stage.AngularComponent = this;
        const /** @type {?} */ animationStage = this._stage.to.bind(this._stage);
        this._stage.to = function (newConfig) {
            animationStage(newConfig);
            setTimeout(() => {
                Object.keys(ng._stage.attrs).forEach(key => {
                    if (typeof ng._stage.attrs[key] !== 'function') {
                        ng.config[key] = ng._stage.attrs[key];
                    }
                });
            }, 200);
        };
        if (this.config) {
            this.config.subscribe(config => {
                this._config = config;
                this.uploadKonva(config);
            });
        }
    }
    /**
     * @param {?} config
     * @return {?}
     */
    uploadKonva(config) {
        const /** @type {?} */ props = Object.assign({}, config, createListener(this));
        applyNodeProps(this, props, this.cacheProps);
        this.cacheProps = props;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.shapes.forEach((item) => {
            if (this !== item) {
                item.added = true;
                this._stage.add(item.getStage());
                updatePicture(this._stage);
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._stage.destroy();
    }
}
CoreShapeComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:max-line-length
                selector: 'ko-shape, ko-layer, ko-circle, ko-fastlayer, ko-group, ko-label, ko-rect, ko-ellipse, ko-wedge, ko-line, ko-sprite, ko-image, ko-text, ko-text-path, ko-star, ko-ring, ko-arc, ko-tag, ko-path, ko-regular-polygon, ko-arrow',
                template: `<div><ng-content></ng-content></div>`
            },] },
];
/** @nocollapse */
CoreShapeComponent.ctorParameters = () => [
    { type: ElementRef }
];
CoreShapeComponent.propDecorators = {
    shapes: [{ type: ContentChildren, args: [CoreShapeComponent,] }],
    config: [{ type: Input }],
    click: [{ type: Output }],
    dblclick: [{ type: Output }],
    mouseover: [{ type: Output }],
    mouseout: [{ type: Output }],
    mousemove: [{ type: Output }],
    tap: [{ type: Output }],
    dbltap: [{ type: Output }],
    touchstart: [{ type: Output }],
    scaleXChange: [{ type: Output }],
    fillChange: [{ type: Output }],
    dragstart: [{ type: Output }],
    dragmove: [{ type: Output }],
    dragend: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StageComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.shapes = new QueryList();
        this.click = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.tap = new EventEmitter();
        this.dbltap = new EventEmitter();
        this.touchstart = new EventEmitter();
        this.scaleXChange = new EventEmitter();
        this.fillChange = new EventEmitter();
        this.dragstart = new EventEmitter();
        this.dragmove = new EventEmitter();
        this.dragend = new EventEmitter();
        this.cacheProps = {};
    }
    /**
     * @return {?}
     */
    getStage() {
        return this._stage || {};
    }
    /**
     * @return {?}
     */
    getConfig() {
        return this._config || {};
    }
    /**
     * @param {?} config
     * @return {?}
     */
    uploadKonva(config) {
        const /** @type {?} */ props = Object.assign({}, config, createListener(this));
        applyNodeProps(this, props, this.cacheProps);
        this.cacheProps = props;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ nodeContainer = this.elementRef.nativeElement;
        this.config.subscribe(config => {
            this._config = config;
            if (!this._stage) {
                this._stage = new Konva.Stage({
                    width: config.width,
                    height: config.height,
                    container: nodeContainer
                });
                this.uploadKonva(config);
            }
            else {
                this.uploadKonva(config);
            }
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.shapes.forEach((item) => {
            this._stage.add(item.getStage());
            updatePicture(this._stage);
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._stage.destroy();
    }
}
StageComponent.decorators = [
    { type: Component, args: [{
                selector: 'ko-stage',
                template: `<div><ng-content></ng-content>{{config}}</div>`
            },] },
];
/** @nocollapse */
StageComponent.ctorParameters = () => [
    { type: ElementRef }
];
StageComponent.propDecorators = {
    shapes: [{ type: ContentChildren, args: [CoreShapeComponent,] }],
    config: [{ type: Input }],
    click: [{ type: Output }],
    dblclick: [{ type: Output }],
    mouseover: [{ type: Output }],
    mouseout: [{ type: Output }],
    mousemove: [{ type: Output }],
    tap: [{ type: Output }],
    dbltap: [{ type: Output }],
    touchstart: [{ type: Output }],
    scaleXChange: [{ type: Output }],
    fillChange: [{ type: Output }],
    dragstart: [{ type: Output }],
    dragmove: [{ type: Output }],
    dragend: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
if (typeof window !== 'undefined' && !window.Konva) {
    require('konva');
}
class KonvaModule {
}
KonvaModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    StageComponent,
                    CoreShapeComponent,
                ],
                exports: [
                    StageComponent,
                    CoreShapeComponent,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { KonvaModule, StageComponent, CoreShapeComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,