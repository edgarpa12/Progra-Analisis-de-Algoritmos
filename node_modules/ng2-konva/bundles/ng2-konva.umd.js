(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng2-konva', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ng2-konva'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} node
     * @return {?}
     */
    function updatePicture(node) {
        var /** @type {?} */ drawingNode = node.getLayer() || node.getStage();
        if (drawingNode) {
            drawingNode.batchDraw();
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} component
     * @param {?=} props
     * @param {?=} oldProps
     * @return {?}
     */
    function applyNodeProps(component, props, oldProps) {
        if (props === void 0) {
            props = {};
        }
        if (oldProps === void 0) {
            oldProps = {};
        }
        if ('id' in props) {
            // tslint:disable-next-line:max-line-length
            var /** @type {?} */ message = "ng2-konva: You are using \"id\" attribute for Konva node. In some very rare cases it may produce bugs. Currently we recommend not to use it and use \"name\" attribute instead.";
            console.warn(message);
        }
        var /** @type {?} */ instance = component._stage;
        var /** @type {?} */ updatedProps = {};
        var /** @type {?} */ hasUpdates = false;
        Object.keys(oldProps).forEach(function (key) {
            var /** @type {?} */ isEvent = key.slice(0, 2) === 'on';
            var /** @type {?} */ propChanged = oldProps[key] !== props[key];
            if (isEvent && propChanged) {
                var /** @type {?} */ eventName = key.substr(2).toLowerCase();
                if (eventName.substr(0, 7) === 'content') {
                    eventName =
                        'content' +
                            eventName.substr(7, 1).toUpperCase() +
                            eventName.substr(8);
                }
                instance.off(eventName, oldProps[key]);
            }
            var /** @type {?} */ toRemove = !props.hasOwnProperty(key);
            if (toRemove) {
                instance.setAttr(key, undefined);
            }
        });
        Object.keys(props).forEach(function (key) {
            var /** @type {?} */ isEvent = key.slice(0, 2) === 'on';
            var /** @type {?} */ toAdd = oldProps[key] !== props[key];
            if (isEvent && toAdd) {
                var /** @type {?} */ eventName = key.substr(2).toLowerCase();
                if (eventName.substr(0, 7) === 'content') {
                    eventName =
                        'content' +
                            eventName.substr(7, 1).toUpperCase() +
                            eventName.substr(8);
                }
                if (props[key]) {
                    instance.off(eventName);
                    instance.on(eventName, function (evt) {
                        props[key](evt.target.AngularComponent, evt);
                    });
                }
            }
            if (!isEvent &&
                (props[key] !== oldProps[key] || props[key] !== instance.getAttr(key))) {
                hasUpdates = true;
                updatedProps[key] = props[key];
            }
        });
        if (hasUpdates) {
            instance.setAttrs(updatedProps);
            updatePicture(instance);
            var /** @type {?} */ val_1;
            Object.keys(updatedProps).forEach(function (prop) {
                val_1 = updatedProps[prop];
                if (val_1 instanceof Image && !val_1.complete) {
                    var /** @type {?} */ node_1 = instance;
                    val_1.addEventListener('load', function () {
                        var /** @type {?} */ layer = node_1.getLayer();
                        if (layer) {
                            layer.batchDraw();
                        }
                    });
                }
            });
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} str
     * @return {?}
     */
    function camelize(str) {
        return str
            .replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter, index) {
            return index == 0 ? letter.toLowerCase() : letter.toUpperCase();
        })
            .replace(/\s+/g, '');
    }
    /**
     * @param {?} string
     * @return {?}
     */
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    /**
     * @param {?} componentTag
     * @return {?}
     */
    function getName(componentTag) {
        return capitalizeFirstLetter(camelize(componentTag.substr(3).replace('-', ' ')));
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    function createListener(instance) {
        var /** @type {?} */ output = {};
        [
            'click',
            'dblclick',
            'mouseover',
            'mouseout',
            'mousemove',
            'tap',
            'dbltap',
            'touchstart',
            'scaleXChange',
            'fillChange',
            'dragstart',
            'dragmove',
            'dragend',
        ].forEach(function (eventName) {
            if (instance[eventName].observers.length) {
                output['on' + eventName] = instance[eventName].emit.bind(instance[eventName]);
            }
        });
        return output;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CoreShapeComponent = (function () {
        function CoreShapeComponent(elementRef) {
            this.elementRef = elementRef;
            this.shapes = new core.QueryList();
            this.click = new core.EventEmitter();
            this.dblclick = new core.EventEmitter();
            this.mouseover = new core.EventEmitter();
            this.mouseout = new core.EventEmitter();
            this.mousemove = new core.EventEmitter();
            this.tap = new core.EventEmitter();
            this.dbltap = new core.EventEmitter();
            this.touchstart = new core.EventEmitter();
            this.scaleXChange = new core.EventEmitter();
            this.fillChange = new core.EventEmitter();
            this.dragstart = new core.EventEmitter();
            this.dragmove = new core.EventEmitter();
            this.dragend = new core.EventEmitter();
            this.added = false;
            this.cacheProps = {};
            this._stage = {};
            this.nameNode = getName(elementRef.nativeElement.localName);
        }
        /**
         * @return {?}
         */
        CoreShapeComponent.prototype.getStage = /**
         * @return {?}
         */
            function () {
                return this._stage;
            };
        /**
         * @return {?}
         */
        CoreShapeComponent.prototype.getConfig = /**
         * @return {?}
         */
            function () {
                return this._config || {};
            };
        /**
         * @return {?}
         */
        CoreShapeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initKonva();
            };
        /**
         * @return {?}
         */
        CoreShapeComponent.prototype.initKonva = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ ng = this;
                var /** @type {?} */ NodeClass = Konva[this.nameNode];
                this._stage = new NodeClass();
                this._stage.AngularComponent = this;
                var /** @type {?} */ animationStage = this._stage.to.bind(this._stage);
                this._stage.to = function (newConfig) {
                    animationStage(newConfig);
                    setTimeout(function () {
                        Object.keys(ng._stage.attrs).forEach(function (key) {
                            if (typeof ng._stage.attrs[key] !== 'function') {
                                ng.config[key] = ng._stage.attrs[key];
                            }
                        });
                    }, 200);
                };
                if (this.config) {
                    this.config.subscribe(function (config) {
                        _this._config = config;
                        _this.uploadKonva(config);
                    });
                }
            };
        /**
         * @param {?} config
         * @return {?}
         */
        CoreShapeComponent.prototype.uploadKonva = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var /** @type {?} */ props = __assign({}, config, createListener(this));
                applyNodeProps(this, props, this.cacheProps);
                this.cacheProps = props;
            };
        /**
         * @return {?}
         */
        CoreShapeComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.shapes.forEach(function (item) {
                    if (_this !== item) {
                        item.added = true;
                        _this._stage.add(item.getStage());
                        updatePicture(_this._stage);
                    }
                });
            };
        /**
         * @return {?}
         */
        CoreShapeComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._stage.destroy();
            };
        CoreShapeComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:max-line-length
                        selector: 'ko-shape, ko-layer, ko-circle, ko-fastlayer, ko-group, ko-label, ko-rect, ko-ellipse, ko-wedge, ko-line, ko-sprite, ko-image, ko-text, ko-text-path, ko-star, ko-ring, ko-arc, ko-tag, ko-path, ko-regular-polygon, ko-arrow',
                        template: "<div><ng-content></ng-content></div>"
                    },] },
        ];
        /** @nocollapse */
        CoreShapeComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        CoreShapeComponent.propDecorators = {
            shapes: [{ type: core.ContentChildren, args: [CoreShapeComponent,] }],
            config: [{ type: core.Input }],
            click: [{ type: core.Output }],
            dblclick: [{ type: core.Output }],
            mouseover: [{ type: core.Output }],
            mouseout: [{ type: core.Output }],
            mousemove: [{ type: core.Output }],
            tap: [{ type: core.Output }],
            dbltap: [{ type: core.Output }],
            touchstart: [{ type: core.Output }],
            scaleXChange: [{ type: core.Output }],
            fillChange: [{ type: core.Output }],
            dragstart: [{ type: core.Output }],
            dragmove: [{ type: core.Output }],
            dragend: [{ type: core.Output }]
        };
        return CoreShapeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var StageComponent = (function () {
        function StageComponent(elementRef) {
            this.elementRef = elementRef;
            this.shapes = new core.QueryList();
            this.click = new core.EventEmitter();
            this.dblclick = new core.EventEmitter();
            this.mouseover = new core.EventEmitter();
            this.mouseout = new core.EventEmitter();
            this.mousemove = new core.EventEmitter();
            this.tap = new core.EventEmitter();
            this.dbltap = new core.EventEmitter();
            this.touchstart = new core.EventEmitter();
            this.scaleXChange = new core.EventEmitter();
            this.fillChange = new core.EventEmitter();
            this.dragstart = new core.EventEmitter();
            this.dragmove = new core.EventEmitter();
            this.dragend = new core.EventEmitter();
            this.cacheProps = {};
        }
        /**
         * @return {?}
         */
        StageComponent.prototype.getStage = /**
         * @return {?}
         */
            function () {
                return this._stage || {};
            };
        /**
         * @return {?}
         */
        StageComponent.prototype.getConfig = /**
         * @return {?}
         */
            function () {
                return this._config || {};
            };
        /**
         * @param {?} config
         * @return {?}
         */
        StageComponent.prototype.uploadKonva = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var /** @type {?} */ props = __assign({}, config, createListener(this));
                applyNodeProps(this, props, this.cacheProps);
                this.cacheProps = props;
            };
        /**
         * @return {?}
         */
        StageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ nodeContainer = this.elementRef.nativeElement;
                this.config.subscribe(function (config) {
                    _this._config = config;
                    if (!_this._stage) {
                        _this._stage = new Konva.Stage({
                            width: config.width,
                            height: config.height,
                            container: nodeContainer
                        });
                        _this.uploadKonva(config);
                    }
                    else {
                        _this.uploadKonva(config);
                    }
                });
            };
        /**
         * @return {?}
         */
        StageComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.shapes.forEach(function (item) {
                    _this._stage.add(item.getStage());
                    updatePicture(_this._stage);
                });
            };
        /**
         * @return {?}
         */
        StageComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._stage.destroy();
            };
        StageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ko-stage',
                        template: "<div><ng-content></ng-content>{{config}}</div>"
                    },] },
        ];
        /** @nocollapse */
        StageComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        StageComponent.propDecorators = {
            shapes: [{ type: core.ContentChildren, args: [CoreShapeComponent,] }],
            config: [{ type: core.Input }],
            click: [{ type: core.Output }],
            dblclick: [{ type: core.Output }],
            mouseover: [{ type: core.Output }],
            mouseout: [{ type: core.Output }],
            mousemove: [{ type: core.Output }],
            tap: [{ type: core.Output }],
            dbltap: [{ type: core.Output }],
            touchstart: [{ type: core.Output }],
            scaleXChange: [{ type: core.Output }],
            fillChange: [{ type: core.Output }],
            dragstart: [{ type: core.Output }],
            dragmove: [{ type: core.Output }],
            dragend: [{ type: core.Output }]
        };
        return StageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    if (typeof window !== 'undefined' && !window.Konva) {
        require('konva');
    }
    var KonvaModule = (function () {
        function KonvaModule() {
        }
        KonvaModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            StageComponent,
                            CoreShapeComponent,
                        ],
                        exports: [
                            StageComponent,
                            CoreShapeComponent,
                        ]
                    },] },
        ];
        return KonvaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.KonvaModule = KonvaModule;
    exports.StageComponent = StageComponent;
    exports.CoreShapeComponent = CoreShapeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,