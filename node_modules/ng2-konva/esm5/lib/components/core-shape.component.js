/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ElementRef, ContentChildren, QueryList, } from '@angular/core';
import { Observable } from 'rxjs';
import { getName, createListener, applyNodeProps, updatePicture } from '../utils/index';
var CoreShapeComponent = /** @class */ (function () {
    function CoreShapeComponent(elementRef) {
        this.elementRef = elementRef;
        this.shapes = new QueryList();
        this.click = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.tap = new EventEmitter();
        this.dbltap = new EventEmitter();
        this.touchstart = new EventEmitter();
        this.scaleXChange = new EventEmitter();
        this.fillChange = new EventEmitter();
        this.dragstart = new EventEmitter();
        this.dragmove = new EventEmitter();
        this.dragend = new EventEmitter();
        this.added = false;
        this.cacheProps = {};
        this._stage = {};
        this.nameNode = getName(elementRef.nativeElement.localName);
    }
    /**
     * @return {?}
     */
    CoreShapeComponent.prototype.getStage = /**
     * @return {?}
     */
    function () {
        return this._stage;
    };
    /**
     * @return {?}
     */
    CoreShapeComponent.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        return this._config || {};
    };
    /**
     * @return {?}
     */
    CoreShapeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initKonva();
    };
    /**
     * @return {?}
     */
    CoreShapeComponent.prototype.initKonva = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ ng = this;
        var /** @type {?} */ NodeClass = Konva[this.nameNode];
        this._stage = new NodeClass();
        this._stage.AngularComponent = this;
        var /** @type {?} */ animationStage = this._stage.to.bind(this._stage);
        this._stage.to = function (newConfig) {
            animationStage(newConfig);
            setTimeout(function () {
                Object.keys(ng._stage.attrs).forEach(function (key) {
                    if (typeof ng._stage.attrs[key] !== 'function') {
                        ng.config[key] = ng._stage.attrs[key];
                    }
                });
            }, 200);
        };
        if (this.config) {
            this.config.subscribe(function (config) {
                _this._config = config;
                _this.uploadKonva(config);
            });
        }
    };
    /**
     * @param {?} config
     * @return {?}
     */
    CoreShapeComponent.prototype.uploadKonva = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var /** @type {?} */ props = tslib_1.__assign({}, config, createListener(this));
        applyNodeProps(this, props, this.cacheProps);
        this.cacheProps = props;
    };
    /**
     * @return {?}
     */
    CoreShapeComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.shapes.forEach(function (item) {
            if (_this !== item) {
                item.added = true;
                _this._stage.add(item.getStage());
                updatePicture(_this._stage);
            }
        });
    };
    /**
     * @return {?}
     */
    CoreShapeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._stage.destroy();
    };
    CoreShapeComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:max-line-length
                    selector: 'ko-shape, ko-layer, ko-circle, ko-fastlayer, ko-group, ko-label, ko-rect, ko-ellipse, ko-wedge, ko-line, ko-sprite, ko-image, ko-text, ko-text-path, ko-star, ko-ring, ko-arc, ko-tag, ko-path, ko-regular-polygon, ko-arrow',
                    template: "<div><ng-content></ng-content></div>"
                },] },
    ];
    /** @nocollapse */
    CoreShapeComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CoreShapeComponent.propDecorators = {
        shapes: [{ type: ContentChildren, args: [CoreShapeComponent,] }],
        config: [{ type: Input }],
        click: [{ type: Output }],
        dblclick: [{ type: Output }],
        mouseover: [{ type: Output }],
        mouseout: [{ type: Output }],
        mousemove: [{ type: Output }],
        tap: [{ type: Output }],
        dbltap: [{ type: Output }],
        touchstart: [{ type: Output }],
        scaleXChange: [{ type: Output }],
        fillChange: [{ type: Output }],
        dragstart: [{ type: Output }],
        dragmove: [{ type: Output }],
        dragend: [{ type: Output }]
    };
    return CoreShapeComponent;
}());
export { CoreShapeComponent };
function CoreShapeComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    CoreShapeComponent.prototype.shapes;
    /** @type {?} */
    CoreShapeComponent.prototype.config;
    /** @type {?} */
    CoreShapeComponent.prototype.click;
    /** @type {?} */
    CoreShapeComponent.prototype.dblclick;
    /** @type {?} */
    CoreShapeComponent.prototype.mouseover;
    /** @type {?} */
    CoreShapeComponent.prototype.mouseout;
    /** @type {?} */
    CoreShapeComponent.prototype.mousemove;
    /** @type {?} */
    CoreShapeComponent.prototype.tap;
    /** @type {?} */
    CoreShapeComponent.prototype.dbltap;
    /** @type {?} */
    CoreShapeComponent.prototype.touchstart;
    /** @type {?} */
    CoreShapeComponent.prototype.scaleXChange;
    /** @type {?} */
    CoreShapeComponent.prototype.fillChange;
    /** @type {?} */
    CoreShapeComponent.prototype.dragstart;
    /** @type {?} */
    CoreShapeComponent.prototype.dragmove;
    /** @type {?} */
    CoreShapeComponent.prototype.dragend;
    /** @type {?} */
    CoreShapeComponent.prototype.nameNode;
    /** @type {?} */
    CoreShapeComponent.prototype.added;
    /** @type {?} */
    CoreShapeComponent.prototype.cacheProps;
    /** @type {?} */
    CoreShapeComponent.prototype._stage;
    /** @type {?} */
    CoreShapeComponent.prototype._config;
    /** @type {?} */
    CoreShapeComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,