/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import updatePicture from './updatePicture';
import applyNodeProps from './applyNodeProps';
/**
 * @param {?} str
 * @return {?}
 */
function camelize(str) {
    return str
        .replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter, index) {
        return index == 0 ? letter.toLowerCase() : letter.toUpperCase();
    })
        .replace(/\s+/g, '');
}
/**
 * @param {?} string
 * @return {?}
 */
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
/**
 * @param {?} componentTag
 * @return {?}
 */
export function getName(componentTag) {
    return capitalizeFirstLetter(camelize(componentTag.substr(3).replace('-', ' ')));
}
/**
 * @param {?} instance
 * @return {?}
 */
export function createListener(instance) {
    var /** @type {?} */ output = {};
    [
        'click',
        'dblclick',
        'mouseover',
        'mouseout',
        'mousemove',
        'tap',
        'dbltap',
        'touchstart',
        'scaleXChange',
        'fillChange',
        'dragstart',
        'dragmove',
        'dragend',
    ].forEach(function (eventName) {
        if (instance[eventName].observers.length) {
            output['on' + eventName] = instance[eventName].emit.bind(instance[eventName]);
        }
    });
    return output;
}
export { updatePicture, applyNodeProps };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzIta29udmEvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sYUFBYSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sY0FBYyxNQUFNLGtCQUFrQixDQUFDOzs7OztBQUU5QyxrQkFBa0IsR0FBRztJQUNuQixNQUFNLENBQUMsR0FBRztTQUNQLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxVQUFTLE1BQU0sRUFBRSxLQUFLO1FBQ3BELE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUNqRSxDQUFDO1NBQ0QsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztDQUN4Qjs7Ozs7QUFFRCwrQkFBK0IsTUFBTTtJQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3pEOzs7OztBQUVELE1BQU0sa0JBQWtCLFlBQVk7SUFDbEMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xGOzs7OztBQUVELE1BQU0seUJBQXlCLFFBQWE7SUFDMUMscUJBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNsQjtRQUNFLE9BQU87UUFDUCxVQUFVO1FBQ1YsV0FBVztRQUNYLFVBQVU7UUFDVixXQUFXO1FBQ1gsS0FBSztRQUNMLFFBQVE7UUFDUixZQUFZO1FBQ1osY0FBYztRQUNkLFlBQVk7UUFDWixXQUFXO1FBQ1gsVUFBVTtRQUNWLFNBQVM7S0FDVixDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7UUFDakIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3RELFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FDcEIsQ0FBQztTQUNIO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQztDQUNmO0FBRUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1cGRhdGVQaWN0dXJlIGZyb20gJy4vdXBkYXRlUGljdHVyZSc7XHJcbmltcG9ydCBhcHBseU5vZGVQcm9wcyBmcm9tICcuL2FwcGx5Tm9kZVByb3BzJztcclxuXHJcbmZ1bmN0aW9uIGNhbWVsaXplKHN0cikge1xyXG4gIHJldHVybiBzdHJcclxuICAgIC5yZXBsYWNlKC8oPzpeXFx3fFtBLVpdfFxcYlxcdykvZywgZnVuY3Rpb24obGV0dGVyLCBpbmRleCkge1xyXG4gICAgICByZXR1cm4gaW5kZXggPT0gMCA/IGxldHRlci50b0xvd2VyQ2FzZSgpIDogbGV0dGVyLnRvVXBwZXJDYXNlKCk7XHJcbiAgICB9KVxyXG4gICAgLnJlcGxhY2UoL1xccysvZywgJycpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoc3RyaW5nKSB7XHJcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWUoY29tcG9uZW50VGFnKSB7XHJcbiAgcmV0dXJuIGNhcGl0YWxpemVGaXJzdExldHRlcihjYW1lbGl6ZShjb21wb25lbnRUYWcuc3Vic3RyKDMpLnJlcGxhY2UoJy0nLCAnICcpKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaXN0ZW5lcihpbnN0YW5jZTogYW55KSB7XHJcbiAgY29uc3Qgb3V0cHV0ID0ge307XHJcbiAgW1xyXG4gICAgJ2NsaWNrJyxcclxuICAgICdkYmxjbGljaycsXHJcbiAgICAnbW91c2VvdmVyJyxcclxuICAgICdtb3VzZW91dCcsXHJcbiAgICAnbW91c2Vtb3ZlJyxcclxuICAgICd0YXAnLFxyXG4gICAgJ2RibHRhcCcsXHJcbiAgICAndG91Y2hzdGFydCcsXHJcbiAgICAnc2NhbGVYQ2hhbmdlJyxcclxuICAgICdmaWxsQ2hhbmdlJyxcclxuICAgICdkcmFnc3RhcnQnLFxyXG4gICAgJ2RyYWdtb3ZlJyxcclxuICAgICdkcmFnZW5kJyxcclxuICBdLmZvckVhY2goZXZlbnROYW1lID0+IHtcclxuICAgIGlmIChpbnN0YW5jZVtldmVudE5hbWVdLm9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgb3V0cHV0WydvbicgKyBldmVudE5hbWVdID0gaW5zdGFuY2VbZXZlbnROYW1lXS5lbWl0LmJpbmQoXHJcbiAgICAgICAgaW5zdGFuY2VbZXZlbnROYW1lXVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuXHJcbmV4cG9ydCB7IHVwZGF0ZVBpY3R1cmUsIGFwcGx5Tm9kZVByb3BzIH07XHJcbiJdfQ==