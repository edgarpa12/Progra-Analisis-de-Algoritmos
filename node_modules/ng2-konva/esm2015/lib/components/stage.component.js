/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, ContentChildren, QueryList } from '@angular/core';
import { CoreShapeComponent as CoreShape } from './core-shape.component';
import { Observable } from 'rxjs';
import { updatePicture, createListener, applyNodeProps } from '../utils/index';
export class StageComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.shapes = new QueryList();
        this.click = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.tap = new EventEmitter();
        this.dbltap = new EventEmitter();
        this.touchstart = new EventEmitter();
        this.scaleXChange = new EventEmitter();
        this.fillChange = new EventEmitter();
        this.dragstart = new EventEmitter();
        this.dragmove = new EventEmitter();
        this.dragend = new EventEmitter();
        this.cacheProps = {};
    }
    /**
     * @return {?}
     */
    getStage() {
        return this._stage || {};
    }
    /**
     * @return {?}
     */
    getConfig() {
        return this._config || {};
    }
    /**
     * @param {?} config
     * @return {?}
     */
    uploadKonva(config) {
        const /** @type {?} */ props = Object.assign({}, config, createListener(this));
        applyNodeProps(this, props, this.cacheProps);
        this.cacheProps = props;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ nodeContainer = this.elementRef.nativeElement;
        this.config.subscribe(config => {
            this._config = config;
            if (!this._stage) {
                this._stage = new Konva.Stage({
                    width: config.width,
                    height: config.height,
                    container: nodeContainer
                });
                this.uploadKonva(config);
            }
            else {
                this.uploadKonva(config);
            }
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.shapes.forEach((item) => {
            this._stage.add(item.getStage());
            updatePicture(this._stage);
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._stage.destroy();
    }
}
StageComponent.decorators = [
    { type: Component, args: [{
                selector: 'ko-stage',
                template: `<div><ng-content></ng-content>{{config}}</div>`
            },] },
];
/** @nocollapse */
StageComponent.ctorParameters = () => [
    { type: ElementRef }
];
StageComponent.propDecorators = {
    shapes: [{ type: ContentChildren, args: [CoreShape,] }],
    config: [{ type: Input }],
    click: [{ type: Output }],
    dblclick: [{ type: Output }],
    mouseover: [{ type: Output }],
    mouseout: [{ type: Output }],
    mousemove: [{ type: Output }],
    tap: [{ type: Output }],
    dbltap: [{ type: Output }],
    touchstart: [{ type: Output }],
    scaleXChange: [{ type: Output }],
    fillChange: [{ type: Output }],
    dragstart: [{ type: Output }],
    dragmove: [{ type: Output }],
    dragend: [{ type: Output }]
};
function StageComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    StageComponent.prototype.shapes;
    /** @type {?} */
    StageComponent.prototype.config;
    /** @type {?} */
    StageComponent.prototype.click;
    /** @type {?} */
    StageComponent.prototype.dblclick;
    /** @type {?} */
    StageComponent.prototype.mouseover;
    /** @type {?} */
    StageComponent.prototype.mouseout;
    /** @type {?} */
    StageComponent.prototype.mousemove;
    /** @type {?} */
    StageComponent.prototype.tap;
    /** @type {?} */
    StageComponent.prototype.dbltap;
    /** @type {?} */
    StageComponent.prototype.touchstart;
    /** @type {?} */
    StageComponent.prototype.scaleXChange;
    /** @type {?} */
    StageComponent.prototype.fillChange;
    /** @type {?} */
    StageComponent.prototype.dragstart;
    /** @type {?} */
    StageComponent.prototype.dragmove;
    /** @type {?} */
    StageComponent.prototype.dragend;
    /** @type {?} */
    StageComponent.prototype._stage;
    /** @type {?} */
    StageComponent.prototype._config;
    /** @type {?} */
    StageComponent.prototype.cacheProps;
    /** @type {?} */
    StageComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmcyLWtvbnZhLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc3RhZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUVaLFVBQVUsRUFDVixlQUFlLEVBQ2YsU0FBUyxFQUdWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsSUFBSSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBUy9FLE1BQU07Ozs7SUE4QkosWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtzQkE1QkwsSUFBSSxTQUFTLEVBQWE7cUJBRTFCLElBQUksWUFBWSxFQUFFO3dCQUNmLElBQUksWUFBWSxFQUFFO3lCQUNqQixJQUFJLFlBQVksRUFBRTt3QkFDbkIsSUFBSSxZQUFZLEVBQUU7eUJBQ2pCLElBQUksWUFBWSxFQUFFO21CQUN4QixJQUFJLFlBQVksRUFBRTtzQkFDZixJQUFJLFlBQVksRUFBRTswQkFDZCxJQUFJLFlBQVksRUFBRTs0QkFDaEIsSUFBSSxZQUFZLEVBQUU7MEJBQ3BCLElBQUksWUFBWSxFQUFFO3lCQUNuQixJQUFJLFlBQVksRUFBRTt3QkFDbkIsSUFBSSxZQUFZLEVBQUU7dUJBQ25CLElBQUksWUFBWSxFQUFFOzBCQUkvQixFQUFFO0tBVWtCOzs7O0lBUnZDLFFBQVE7UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7Ozs7O0lBR3BCLFNBQVM7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7Ozs7OztJQUtwQixXQUFXLENBQUMsTUFBTTtRQUN4Qix1QkFBTSxLQUFLLHFCQUNOLE1BQU0sRUFDTixjQUFjLENBQUMsSUFBSSxDQUFDLENBQ3hCLENBQUM7UUFDRixjQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7Ozs7O0lBRzFCLFFBQVE7UUFDTix1QkFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUM7b0JBQzVCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztvQkFDbkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO29CQUNyQixTQUFTLEVBQUUsYUFBYTtpQkFDekIsQ0FBQyxDQUFDO2dCQUNILElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDMUI7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzFCO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFlLEVBQUUsRUFBRTtZQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNqQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzVCLENBQUMsQ0FBQztLQUNKOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDdkI7OztZQXZFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFFBQVEsRUFBRSxnREFBZ0Q7YUFDM0Q7Ozs7WUFoQkMsVUFBVTs7O3FCQW1CVCxlQUFlLFNBQUMsU0FBUztxQkFDekIsS0FBSztvQkFDTCxNQUFNO3VCQUNOLE1BQU07d0JBQ04sTUFBTTt1QkFDTixNQUFNO3dCQUNOLE1BQU07a0JBQ04sTUFBTTtxQkFDTixNQUFNO3lCQUNOLE1BQU07MkJBQ04sTUFBTTt5QkFDTixNQUFNO3dCQUNOLE1BQU07dUJBQ04sTUFBTTtzQkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBBZnRlckNvbnRlbnRJbml0LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgQ29udGVudENoaWxkcmVuLFxyXG4gIFF1ZXJ5TGlzdCxcclxuICBPbkluaXQsXHJcbiAgT25EZXN0cm95XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmVTaGFwZUNvbXBvbmVudCBhcyBDb3JlU2hhcGUgfSBmcm9tICcuL2NvcmUtc2hhcGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB1cGRhdGVQaWN0dXJlLCBjcmVhdGVMaXN0ZW5lciwgYXBwbHlOb2RlUHJvcHMgfSBmcm9tICcuLi91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IEtvbnZhQ29tcG9uZW50IH0gZnJvbSAnLi4va28uaW50ZXJmYWNlJztcclxuXHJcbmRlY2xhcmUgY29uc3QgS29udmE6IGFueTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAna28tc3RhZ2UnLFxyXG4gIHRlbXBsYXRlOiBgPGRpdj48bmctY29udGVudD48L25nLWNvbnRlbnQ+e3tjb25maWd9fTwvZGl2PmBcclxufSlcclxuZXhwb3J0IGNsYXNzIFN0YWdlQ29tcG9uZW50XHJcbiAgaW1wbGVtZW50cyBLb252YUNvbXBvbmVudCwgQWZ0ZXJDb250ZW50SW5pdCwgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gIEBDb250ZW50Q2hpbGRyZW4oQ29yZVNoYXBlKSBzaGFwZXMgPSBuZXcgUXVlcnlMaXN0PENvcmVTaGFwZT4oKTtcclxuICBASW5wdXQoKSBjb25maWc6IE9ic2VydmFibGU8YW55PjtcclxuICBAT3V0cHV0KCkgY2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBkYmxjbGljazogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG1vdXNlb3ZlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG1vdXNlb3V0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgbW91c2Vtb3ZlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgdGFwOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZGJsdGFwOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgdG91Y2hzdGFydDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIHNjYWxlWENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGZpbGxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBkcmFnc3RhcnQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBkcmFnbW92ZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRyYWdlbmQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBwcml2YXRlIF9zdGFnZTtcclxuICBwcml2YXRlIF9jb25maWc7XHJcbiAgcHJpdmF0ZSBjYWNoZVByb3BzOiBhbnkgPSB7fTtcclxuXHJcbiAgcHVibGljIGdldFN0YWdlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3N0YWdlIHx8IHt9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldENvbmZpZygpIHtcclxuICAgIHJldHVybiB0aGlzLl9jb25maWcgfHwge307XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XHJcblxyXG4gIHByaXZhdGUgdXBsb2FkS29udmEoY29uZmlnKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IHtcclxuICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAuLi5jcmVhdGVMaXN0ZW5lcih0aGlzKVxyXG4gICAgfTtcclxuICAgIGFwcGx5Tm9kZVByb3BzKHRoaXMsIHByb3BzLCB0aGlzLmNhY2hlUHJvcHMpO1xyXG4gICAgdGhpcy5jYWNoZVByb3BzID0gcHJvcHM7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGNvbnN0IG5vZGVDb250YWluZXIgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICAgIHRoaXMuY29uZmlnLnN1YnNjcmliZShjb25maWcgPT4ge1xyXG4gICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XHJcbiAgICAgIGlmICghdGhpcy5fc3RhZ2UpIHtcclxuICAgICAgICB0aGlzLl9zdGFnZSA9IG5ldyBLb252YS5TdGFnZSh7XHJcbiAgICAgICAgICB3aWR0aDogY29uZmlnLndpZHRoLFxyXG4gICAgICAgICAgaGVpZ2h0OiBjb25maWcuaGVpZ2h0LFxyXG4gICAgICAgICAgY29udGFpbmVyOiBub2RlQ29udGFpbmVyXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy51cGxvYWRLb252YShjb25maWcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMudXBsb2FkS29udmEoY29uZmlnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLnNoYXBlcy5mb3JFYWNoKChpdGVtOiBDb3JlU2hhcGUpID0+IHtcclxuICAgICAgdGhpcy5fc3RhZ2UuYWRkKGl0ZW0uZ2V0U3RhZ2UoKSk7XHJcbiAgICAgIHVwZGF0ZVBpY3R1cmUodGhpcy5fc3RhZ2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuX3N0YWdlLmRlc3Ryb3koKTtcclxuICB9XHJcbn1cclxuIl19