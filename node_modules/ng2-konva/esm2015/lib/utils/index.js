/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import updatePicture from './updatePicture';
import applyNodeProps from './applyNodeProps';
/**
 * @param {?} str
 * @return {?}
 */
function camelize(str) {
    return str
        .replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter, index) {
        return index == 0 ? letter.toLowerCase() : letter.toUpperCase();
    })
        .replace(/\s+/g, '');
}
/**
 * @param {?} string
 * @return {?}
 */
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
/**
 * @param {?} componentTag
 * @return {?}
 */
export function getName(componentTag) {
    return capitalizeFirstLetter(camelize(componentTag.substr(3).replace('-', ' ')));
}
/**
 * @param {?} instance
 * @return {?}
 */
export function createListener(instance) {
    const /** @type {?} */ output = {};
    [
        'click',
        'dblclick',
        'mouseover',
        'mouseout',
        'mousemove',
        'tap',
        'dbltap',
        'touchstart',
        'scaleXChange',
        'fillChange',
        'dragstart',
        'dragmove',
        'dragend',
    ].forEach(eventName => {
        if (instance[eventName].observers.length) {
            output['on' + eventName] = instance[eventName].emit.bind(instance[eventName]);
        }
    });
    return output;
}
export { updatePicture, applyNodeProps };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzIta29udmEvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sYUFBYSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sY0FBYyxNQUFNLGtCQUFrQixDQUFDOzs7OztBQUU5QyxrQkFBa0IsR0FBRztJQUNuQixNQUFNLENBQUMsR0FBRztTQUNQLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxVQUFTLE1BQU0sRUFBRSxLQUFLO1FBQ3BELE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUNqRSxDQUFDO1NBQ0QsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztDQUN4Qjs7Ozs7QUFFRCwrQkFBK0IsTUFBTTtJQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3pEOzs7OztBQUVELE1BQU0sa0JBQWtCLFlBQVk7SUFDbEMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xGOzs7OztBQUVELE1BQU0seUJBQXlCLFFBQWE7SUFDMUMsdUJBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNsQjtRQUNFLE9BQU87UUFDUCxVQUFVO1FBQ1YsV0FBVztRQUNYLFVBQVU7UUFDVixXQUFXO1FBQ1gsS0FBSztRQUNMLFFBQVE7UUFDUixZQUFZO1FBQ1osY0FBYztRQUNkLFlBQVk7UUFDWixXQUFXO1FBQ1gsVUFBVTtRQUNWLFNBQVM7S0FDVixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUNwQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDekMsTUFBTSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDdEQsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUNwQixDQUFDO1NBQ0g7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDO0NBQ2Y7QUFFRCxPQUFPLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHVwZGF0ZVBpY3R1cmUgZnJvbSAnLi91cGRhdGVQaWN0dXJlJztcclxuaW1wb3J0IGFwcGx5Tm9kZVByb3BzIGZyb20gJy4vYXBwbHlOb2RlUHJvcHMnO1xyXG5cclxuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XHJcbiAgcmV0dXJuIHN0clxyXG4gICAgLnJlcGxhY2UoLyg/Ol5cXHd8W0EtWl18XFxiXFx3KS9nLCBmdW5jdGlvbihsZXR0ZXIsIGluZGV4KSB7XHJcbiAgICAgIHJldHVybiBpbmRleCA9PSAwID8gbGV0dGVyLnRvTG93ZXJDYXNlKCkgOiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcclxuICAgIH0pXHJcbiAgICAucmVwbGFjZSgvXFxzKy9nLCAnJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHJpbmcpIHtcclxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmFtZShjb21wb25lbnRUYWcpIHtcclxuICByZXR1cm4gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGNhbWVsaXplKGNvbXBvbmVudFRhZy5zdWJzdHIoMykucmVwbGFjZSgnLScsICcgJykpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyKGluc3RhbmNlOiBhbnkpIHtcclxuICBjb25zdCBvdXRwdXQgPSB7fTtcclxuICBbXHJcbiAgICAnY2xpY2snLFxyXG4gICAgJ2RibGNsaWNrJyxcclxuICAgICdtb3VzZW92ZXInLFxyXG4gICAgJ21vdXNlb3V0JyxcclxuICAgICdtb3VzZW1vdmUnLFxyXG4gICAgJ3RhcCcsXHJcbiAgICAnZGJsdGFwJyxcclxuICAgICd0b3VjaHN0YXJ0JyxcclxuICAgICdzY2FsZVhDaGFuZ2UnLFxyXG4gICAgJ2ZpbGxDaGFuZ2UnLFxyXG4gICAgJ2RyYWdzdGFydCcsXHJcbiAgICAnZHJhZ21vdmUnLFxyXG4gICAgJ2RyYWdlbmQnLFxyXG4gIF0uZm9yRWFjaChldmVudE5hbWUgPT4ge1xyXG4gICAgaWYgKGluc3RhbmNlW2V2ZW50TmFtZV0ub2JzZXJ2ZXJzLmxlbmd0aCkge1xyXG4gICAgICBvdXRwdXRbJ29uJyArIGV2ZW50TmFtZV0gPSBpbnN0YW5jZVtldmVudE5hbWVdLmVtaXQuYmluZChcclxuICAgICAgICBpbnN0YW5jZVtldmVudE5hbWVdXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuZXhwb3J0IHsgdXBkYXRlUGljdHVyZSwgYXBwbHlOb2RlUHJvcHMgfTtcclxuIl19