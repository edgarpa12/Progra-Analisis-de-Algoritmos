/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// adapted FROM: https://github.com/lavrton/react-konva/blob/master/src/react-konva-fiber.js
import updatePicture from './updatePicture';
/**
 * @param {?} component
 * @param {?=} props
 * @param {?=} oldProps
 * @return {?}
 */
export default function applyNodeProps(component, props = {}, oldProps = {}) {
    if ('id' in props) {
        // tslint:disable-next-line:max-line-length
        const /** @type {?} */ message = `ng2-konva: You are using "id" attribute for Konva node. In some very rare cases it may produce bugs. Currently we recommend not to use it and use "name" attribute instead.`;
        console.warn(message);
    }
    const /** @type {?} */ instance = component._stage;
    const /** @type {?} */ updatedProps = {};
    let /** @type {?} */ hasUpdates = false;
    Object.keys(oldProps).forEach(key => {
        const /** @type {?} */ isEvent = key.slice(0, 2) === 'on';
        const /** @type {?} */ propChanged = oldProps[key] !== props[key];
        if (isEvent && propChanged) {
            let /** @type {?} */ eventName = key.substr(2).toLowerCase();
            if (eventName.substr(0, 7) === 'content') {
                eventName =
                    'content' +
                        eventName.substr(7, 1).toUpperCase() +
                        eventName.substr(8);
            }
            instance.off(eventName, oldProps[key]);
        }
        const /** @type {?} */ toRemove = !props.hasOwnProperty(key);
        if (toRemove) {
            instance.setAttr(key, undefined);
        }
    });
    Object.keys(props).forEach(key => {
        let /** @type {?} */ isEvent = key.slice(0, 2) === 'on';
        const /** @type {?} */ toAdd = oldProps[key] !== props[key];
        if (isEvent && toAdd) {
            let /** @type {?} */ eventName = key.substr(2).toLowerCase();
            if (eventName.substr(0, 7) === 'content') {
                eventName =
                    'content' +
                        eventName.substr(7, 1).toUpperCase() +
                        eventName.substr(8);
            }
            if (props[key]) {
                instance.off(eventName);
                instance.on(eventName, evt => {
                    props[key](evt.target.AngularComponent, evt);
                });
            }
        }
        if (!isEvent &&
            (props[key] !== oldProps[key] || props[key] !== instance.getAttr(key))) {
            hasUpdates = true;
            updatedProps[key] = props[key];
        }
    });
    if (hasUpdates) {
        instance.setAttrs(updatedProps);
        updatePicture(instance);
        let /** @type {?} */ val;
        Object.keys(updatedProps).forEach(prop => {
            val = updatedProps[prop];
            if (val instanceof Image && !val.complete) {
                const /** @type {?} */ node = instance;
                val.addEventListener('load', function () {
                    const /** @type {?} */ layer = node.getLayer();
                    if (layer) {
                        layer.batchDraw();
                    }
                });
            }
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHlOb2RlUHJvcHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzIta29udmEvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvYXBwbHlOb2RlUHJvcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7OztBQUk1QyxNQUFNLENBQUMsT0FBTyx5QkFBeUIsU0FBUyxFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUU7SUFDekUsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7O1FBRWxCLHVCQUFNLE9BQU8sR0FBRyw2S0FBNkssQ0FBQztRQUM5TCxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZCO0lBRUQsdUJBQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDbEMsdUJBQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUN4QixxQkFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBRXZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2xDLHVCQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUM7UUFDekMsdUJBQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDM0IscUJBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDNUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssU0FBUyxD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R0FBRyxRQUFRLENBQUM7Z0JBQ3RCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7b0JBQzNCLHVCQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBQzlCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7d0JBQ1YsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO3FCQUNuQjtpQkFDRixDQUFDLENBQUM7YUFDSjtTQUNGLENBQUMsQ0FBQztLQUNKO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhZGFwdGVkIEZST006IGh0dHBzOi8vZ2l0aHViLmNvbS9sYXZydG9uL3JlYWN0LWtvbnZhL2Jsb2IvbWFzdGVyL3NyYy9yZWFjdC1rb252YS1maWJlci5qc1xyXG5cclxuaW1wb3J0IHVwZGF0ZVBpY3R1cmUgZnJvbSAnLi91cGRhdGVQaWN0dXJlJztcclxuXHJcbmRlY2xhcmUgY29uc3QgSW1hZ2U6IGFueTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGx5Tm9kZVByb3BzKGNvbXBvbmVudCwgcHJvcHMgPSB7fSwgb2xkUHJvcHMgPSB7fSkge1xyXG4gIGlmICgnaWQnIGluIHByb3BzKSB7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXHJcbiAgICBjb25zdCBtZXNzYWdlID0gYG5nMi1rb252YTogWW91IGFyZSB1c2luZyBcImlkXCIgYXR0cmlidXRlIGZvciBLb252YSBub2RlLiBJbiBzb21lIHZlcnkgcmFyZSBjYXNlcyBpdCBtYXkgcHJvZHVjZSBidWdzLiBDdXJyZW50bHkgd2UgcmVjb21tZW5kIG5vdCB0byB1c2UgaXQgYW5kIHVzZSBcIm5hbWVcIiBhdHRyaWJ1dGUgaW5zdGVhZC5gO1xyXG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgaW5zdGFuY2UgPSBjb21wb25lbnQuX3N0YWdlO1xyXG4gIGNvbnN0IHVwZGF0ZWRQcm9wcyA9IHt9O1xyXG4gIGxldCBoYXNVcGRhdGVzID0gZmFsc2U7XHJcblxyXG4gIE9iamVjdC5rZXlzKG9sZFByb3BzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICBjb25zdCBpc0V2ZW50ID0ga2V5LnNsaWNlKDAsIDIpID09PSAnb24nO1xyXG4gICAgY29uc3QgcHJvcENoYW5nZWQgPSBvbGRQcm9wc1trZXldICE9PSBwcm9wc1trZXldO1xyXG4gICAgaWYgKGlzRXZlbnQgJiYgcHJvcENoYW5nZWQpIHtcclxuICAgICAgbGV0IGV2ZW50TmFtZSA9IGtleS5zdWJzdHIoMikudG9Mb3dlckNhc2UoKTtcclxuICAgICAgaWYgKGV2ZW50TmFtZS5zdWJzdHIoMCwgNykgPT09ICdjb250ZW50Jykge1xyXG4gICAgICAgIGV2ZW50TmFtZSA9XHJcbiAgICAgICAgICAnY29udGVudCcgK1xyXG4gICAgICAgICAgZXZlbnROYW1lLnN1YnN0cig3LCAxKS50b1VwcGVyQ2FzZSgpICtcclxuICAgICAgICAgIGV2ZW50TmFtZS5zdWJzdHIoOCk7XHJcbiAgICAgIH1cclxuICAgICAgaW5zdGFuY2Uub2ZmKGV2ZW50TmFtZSwgb2xkUHJvcHNba2V5XSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0b1JlbW92ZSA9ICFwcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xyXG4gICAgaWYgKHRvUmVtb3ZlKSB7XHJcbiAgICAgIGluc3RhbmNlLnNldEF0dHIoa2V5LCB1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICBsZXQgaXNFdmVudCA9IGtleS5zbGljZSgwLCAyKSA9PT0gJ29uJztcclxuICAgIGNvbnN0IHRvQWRkID0gb2xkUHJvcHNba2V5XSAhPT0gcHJvcHNba2V5XTtcclxuICAgIGlmIChpc0V2ZW50ICYmIHRvQWRkKSB7XHJcbiAgICAgIGxldCBldmVudE5hbWUgPSBrZXkuc3Vic3RyKDIpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGlmIChldmVudE5hbWUuc3Vic3RyKDAsIDcpID09PSAnY29udGVudCcpIHtcclxuICAgICAgICBldmVudE5hbWUgPVxyXG4gICAgICAgICAgJ2NvbnRlbnQnICtcclxuICAgICAgICAgIGV2ZW50TmFtZS5zdWJzdHIoNywgMSkudG9VcHBlckNhc2UoKSArXHJcbiAgICAgICAgICBldmVudE5hbWUuc3Vic3RyKDgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XHJcbiAgICAgICAgaW5zdGFuY2Uub2ZmKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgaW5zdGFuY2Uub24oZXZlbnROYW1lLCBldnQgPT4ge1xyXG4gICAgICAgICAgcHJvcHNba2V5XShldnQudGFyZ2V0LkFuZ3VsYXJDb21wb25lbnQsIGV2dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgIWlzRXZlbnQgJiZcclxuICAgICAgKHByb3BzW2tleV0gIT09IG9sZFByb3BzW2tleV0gfHwgcHJvcHNba2V5XSAhPT0gaW5zdGFuY2UuZ2V0QXR0cihrZXkpKVxyXG4gICAgKSB7XHJcbiAgICAgIGhhc1VwZGF0ZXMgPSB0cnVlO1xyXG4gICAgICB1cGRhdGVkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGlmIChoYXNVcGRhdGVzKSB7XHJcbiAgICBpbnN0YW5jZS5zZXRBdHRycyh1cGRhdGVkUHJvcHMpO1xyXG4gICAgdXBkYXRlUGljdHVyZShpbnN0YW5jZSk7XHJcbiAgICBsZXQgdmFsO1xyXG4gICAgT2JqZWN0LmtleXModXBkYXRlZFByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICB2YWwgPSB1cGRhdGVkUHJvcHNbcHJvcF07XHJcbiAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBJbWFnZSAmJiAhdmFsLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIHZhbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBjb25zdCBsYXllciA9IG5vZGUuZ2V0TGF5ZXIoKTtcclxuICAgICAgICAgIGlmIChsYXllcikge1xyXG4gICAgICAgICAgICBsYXllci5iYXRjaERyYXcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==